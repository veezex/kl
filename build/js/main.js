$(document).ready(function(){if(function(s){"use strict";s.fn.emulateTransitionEnd=function(t){var e=!1,i=this;s(this).one("bsTransitionEnd",function(){e=!0});return setTimeout(function(){e||s(i).trigger(s.support.transition.end)},t),this},s(function(){s.support.transition=function(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}(),s.support.transition&&(s.event.special.bsTransitionEnd={bindType:s.support.transition.end,delegateType:s.support.transition.end,handle:function(t){if(s(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(h){"use strict";var u=function(t,e){this.$element=h(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=e,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",h.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",h.proxy(this.pause,this)).on("mouseleave.bs.carousel",h.proxy(this.cycle,this))};function o(n){return this.each(function(){var t=h(this),e=t.data("bs.carousel"),i=h.extend({},u.DEFAULTS,t.data(),"object"==typeof n&&n),s="string"==typeof n?n:i.slide;e||t.data("bs.carousel",e=new u(this,i)),"number"==typeof n?e.to(n):s?e[s]():i.interval&&e.pause().cycle()})}u.VERSION="3.3.5",u.TRANSITION_DURATION=600,u.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},u.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},u.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(h.proxy(this.next,this),this.options.interval)),this},u.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},u.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e);if(("prev"==t&&0===i||"next"==t&&i==this.$items.length-1)&&!this.options.wrap)return e;var s=(i+("prev"==t?-1:1))%this.$items.length;return this.$items.eq(s)},u.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(i<t?"next":"prev",this.$items.eq(t))},u.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&h.support.transition&&(this.$element.trigger(h.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},u.prototype.next=function(){if(!this.sliding)return this.slide("next")},u.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},u.prototype.slide=function(t,e){var i=this.$element.find(".item.active"),s=e||this.getItemForDirection(t,i),n=this.interval,a="next"==t?"left":"right",o=this;if(s.hasClass("active"))return this.sliding=!1;var r=s[0],l=h.Event("slide.bs.carousel",{relatedTarget:r,direction:a});if(this.$element.trigger(l),!l.isDefaultPrevented()){if(this.sliding=!0,n&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var c=h(this.$indicators.children()[this.getItemIndex(s)]);c&&c.addClass("active")}var d=h.Event("slid.bs.carousel",{relatedTarget:r,direction:a});return h.support.transition&&this.$element.hasClass("slide")?(s.addClass(t),s[0].offsetWidth,i.addClass(a),s.addClass(a),i.one("bsTransitionEnd",function(){s.removeClass([t,a].join(" ")).addClass("active"),i.removeClass(["active",a].join(" ")),o.sliding=!1,setTimeout(function(){o.$element.trigger(d)},0)}).emulateTransitionEnd(u.TRANSITION_DURATION)):(i.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(d)),n&&this.cycle(),this}};var t=h.fn.carousel;h.fn.carousel=o,h.fn.carousel.Constructor=u,h.fn.carousel.noConflict=function(){return h.fn.carousel=t,this};var e=function(t){var e,i=h(this),s=h(i.attr("data-target")||(e=i.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,""));if(s.hasClass("carousel")){var n=h.extend({},s.data(),i.data()),a=i.attr("data-slide-to");a&&(n.interval=!1),o.call(s,n),a&&s.data("bs.carousel").to(a),t.preventDefault()}};h(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),h(window).on("load",function(){h('[data-ride="carousel"]').each(function(){var t=h(this);o.call(t,t.data())})})}(jQuery),$(".carousel-item-image .item").each(function(){for(var t=$(this),e=1;e<5;e++)(t=t.next()).length||(t=$(this).siblings(":first")),t.children(":first-child").clone().addClass("cloneditem-"+e).appendTo($(this))}),$(".carousel").carousel({interval:0}),$("#carousel-item-image").carousel({interval:0}),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");if(function(t){"use strict";var e=jQuery.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||3<e[0])throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(),function(o){"use strict";var r=function(t,e){this.$element=o(t),this.options=o.extend({},r.DEFAULTS,e),this.$trigger=o('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};function n(t){var e,i=t.attr("data-target")||(e=t.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"");return o(i)}function l(s){return this.each(function(){var t=o(this),e=t.data("bs.collapse"),i=o.extend({},r.DEFAULTS,t.data(),"object"==typeof s&&s);!e&&i.toggle&&/show|hide/.test(s)&&(i.toggle=!1),e||t.data("bs.collapse",e=new r(this,i)),"string"==typeof s&&e[s]()})}r.VERSION="3.3.7",r.TRANSITION_DURATION=350,r.DEFAULTS={toggle:!0},r.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},r.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var t,e=this.$parent&&this.$parent.children(".collapse__tab").children(".in, .collapsing");if(!(e&&e.length&&(t=e.data("bs.collapse"))&&t.transitioning)){var i=o.Event("show.bs.collapse");if(this.$element.trigger(i),!i.isDefaultPrevented()){e&&e.length&&(l.call(e,"hide"),t||e.data("bs.collapse",null));var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var n=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!o.support.transition)return n.call(this);var a=o.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",o.proxy(n,this)).emulateTransitionEnd(r.TRANSITION_DURATION)[s](this.$element[0][a])}}}},r.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var t=o.Event("hide.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var e=this.dimension();this.$element[e](this.$element[e]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!o.support.transition)return i.call(this);this.$element[e](0).one("bsTransitionEnd",o.proxy(i,this)).emulateTransitionEnd(r.TRANSITION_DURATION)}}},r.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},r.prototype.getParent=function(){return o(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(o.proxy(function(t,e){var i=o(e);this.addAriaAndCollapsedClass(n(i),i)},this)).end()},r.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var t=o.fn.collapse;o.fn.collapse=l,o.fn.collapse.Constructor=r,o.fn.collapse.noConflict=function(){return o.fn.collapse=t,this},o(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var e=o(this);e.attr("data-target")||t.preventDefault();var i=n(e),s=i.data("bs.collapse")?"toggle":e.data();l.call(i,s)})}(jQuery),$(".js-hide-filter").on("click",function(t){t.preventDefault();var e=$(this);$(".filter__input-group--add").hasClass("js-isVisible")?($(".filter__input-group--add").removeClass("js-isVisible"),e.removeClass("iSopened")):($(".filter__input-group--add").addClass("js-isVisible"),e.addClass("iSopened"))}),$(".js-select-btn").on("click",function(){$(".js-select-block").hasClass("isOpen")?$(".js-select-block").removeClass("isOpen"):$(".js-select-block").addClass("isOpen")}),$(".js-select-item").on("click",function(){var t=$(this);t.addClass("js-selected");var e=t.text(),i=t.attr("data-group");$('.js-select-btn[data-group="'+i+'"]').text(e),$(".js-select-label").addClass("floated"),$(".js-select-block").removeClass("isOpen")}),$(".item__img").click(function(){var t=$(this).attr("src");console.log(t),$(".image__container").css("background-image","url("+t+")")}),null!==document.getElementById("map")){ymaps.ready(function(){var e=new ymaps.Map("map",{center:[55.76,37.64],zoom:10,controls:[]}),t=new ymaps.Placemark([55.760584,37.63945],{},{iconLayout:"default#image",iconImageHref:"images/map__baloon.png",iconImageSize:[57,51],iconImageOffset:[-37,-50]}),i=ymaps.templateLayoutFactory.createClass("<div class='map__zoom-block u-jc-sbu-fd-col'><div id='zoom-in' class='map__zoom u-jc-ce u-ai-ce'><svg class='svg' width='12px' height='12px' viewBox='0 0 12 12' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><g id='Group' ><rect id='Rectangle-3' x='0' y='5' width='12' height='2'></rect><rect id='Rectangle-3' transform='translate(6.000000, 6.000000) rotate(90.000000) translate(-6.000000, -6.000000) ' x='0' y='5' width='12' height='2'></rect></g></svg></div><br><div id='zoom-out' class='map__zoom map__zoom--minus u-jc-ce u-ai-ce'><svg class='svg' width='8px' height='2px' viewBox='0 0 8 2' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><rect id='map__minus' width='8' height='2'></rect></svg></div>",{build:function(){i.superclass.build.call(this),this.zoomInCallback=ymaps.util.bind(this.zoomIn,this),this.zoomOutCallback=ymaps.util.bind(this.zoomOut,this),$("#zoom-in").bind("click",this.zoomInCallback),$("#zoom-out").bind("click",this.zoomOutCallback)},clear:function(){$("#zoom-in").unbind("click",this.zoomInCallback),$("#zoom-out").unbind("click",this.zoomOutCallback),i.superclass.clear.call(this)},zoomIn:function(){var t=this.getData().control.getMap();t.setZoom(t.getZoom()+1,{checkZoomRange:!0})},zoomOut:function(){var t=this.getData().control.getMap();t.setZoom(t.getZoom()-1,{checkZoomRange:!0})}});$(window).on("resize",function(){var t=document.getElementById("map").offsetHeight/2-50;e.controls.remove("zoomControl"),e.controls.add("zoomControl",{layout:i,position:{left:"30px",top:t}})}).resize(),e.geoObjects.add(t);var s=new ymaps.ObjectManager({clusterize:!0,gridSize:64,clusterIconLayout:"default#pieChart",clusterDisableClickZoom:!1});fetch("../js/test.json").then(function(t){return t.json()}).then(function(t){return{type:"FeatureCollection",features:t.map(function(t,e){return{id:e,type:"Feature",geometry:{type:"Point",coordinates:[t.lat,t.long]},properties:{iconCaption:t.serialNumber}}})}}).then(function(t){s.add(t)}),s.objects.options.set({iconLayout:"default#image",iconImageHref:"images/map__baloon.png",iconImageSize:[57,51],iconImageOffset:[-37,-50]}),e.geoObjects.add(s)})}$("#modal-close").on("click",function(t){$(this).closest(".js-modal").removeClass("isOpened")}),$(".js-modal__btn").on("click",function(t){var e=$(this).attr("data-modal");$("#"+e).addClass("isOpened")}),$(".js-tab__item").on("click",function(t){var e=$(this);e.closest(".tab").find(".js-tab__item").removeClass("js-active"),e.addClass("js-active");var i=e.attr("data-tab");e.closest(".tab").find(".tab__block").removeClass("js-active"),$('[data-content="'+i+'"]').addClass("js-active")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
