$(document).ready(function(){if(function(s){"use strict";s.fn.emulateTransitionEnd=function(t){var e=!1,i=this;s(this).one("bsTransitionEnd",function(){e=!0});return setTimeout(function(){e||s(i).trigger(s.support.transition.end)},t),this},s(function(){s.support.transition=function(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}(),s.support.transition&&(s.event.special.bsTransitionEnd={bindType:s.support.transition.end,delegateType:s.support.transition.end,handle:function(t){if(s(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(p){"use strict";var h=function(t,e){this.$element=p(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=e,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",p.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",p.proxy(this.pause,this)).on("mouseleave.bs.carousel",p.proxy(this.cycle,this))};function o(a){return this.each(function(){var t=p(this),e=t.data("bs.carousel"),i=p.extend({},h.DEFAULTS,t.data(),"object"==typeof a&&a),s="string"==typeof a?a:i.slide;e||t.data("bs.carousel",e=new h(this,i)),"number"==typeof a?e.to(a):s?e[s]():i.interval&&e.pause().cycle()})}h.VERSION="3.3.5",h.TRANSITION_DURATION=600,h.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},h.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},h.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(p.proxy(this.next,this),this.options.interval)),this},h.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},h.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e);if(("prev"==t&&0===i||"next"==t&&i==this.$items.length-1)&&!this.options.wrap)return e;var s=(i+("prev"==t?-1:1))%this.$items.length;return this.$items.eq(s)},h.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(i<t?"next":"prev",this.$items.eq(t))},h.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&p.support.transition&&(this.$element.trigger(p.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},h.prototype.next=function(){if(!this.sliding)return this.slide("next")},h.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},h.prototype.slide=function(t,e){var i=this.$element.find(".item.active"),s=e||this.getItemForDirection(t,i),a=this.interval,n="next"==t?"left":"right",o=this;if(s.hasClass("active"))return this.sliding=!1;var l=s[0],r=p.Event("slide.bs.carousel",{relatedTarget:l,direction:n});if(this.$element.trigger(r),!r.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var c=p(this.$indicators.children()[this.getItemIndex(s)]);c&&c.addClass("active")}var d=p.Event("slid.bs.carousel",{relatedTarget:l,direction:n});return p.support.transition&&this.$element.hasClass("slide")?(s.addClass(t),s[0].offsetWidth,i.addClass(n),s.addClass(n),i.one("bsTransitionEnd",function(){s.removeClass([t,n].join(" ")).addClass("active"),i.removeClass(["active",n].join(" ")),o.sliding=!1,setTimeout(function(){o.$element.trigger(d)},0)}).emulateTransitionEnd(h.TRANSITION_DURATION)):(i.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(d)),a&&this.cycle(),this}};var t=p.fn.carousel;p.fn.carousel=o,p.fn.carousel.Constructor=h,p.fn.carousel.noConflict=function(){return p.fn.carousel=t,this};var e=function(t){var e,i=p(this),s=p(i.attr("data-target")||(e=i.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,""));if(s.hasClass("carousel")){var a=p.extend({},s.data(),i.data()),n=i.attr("data-slide-to");n&&(a.interval=!1),o.call(s,a),n&&s.data("bs.carousel").to(n),t.preventDefault()}};p(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),p(window).on("load",function(){p('[data-ride="carousel"]').each(function(){var t=p(this);o.call(t,t.data())})})}(jQuery),$(".carousel-item-image .item").each(function(){for(var t=$(this),e=1;e<5;e++)(t=t.next()).length||(t=$(this).siblings(":first")),t.children(":first-child").clone().addClass("cloneditem-"+e).appendTo($(this))}),$(".carousel").carousel({interval:0}),$("#carousel-item-image").carousel({interval:0}),$(".benefits__item").on("click",function(){var t=$(this),e=t.attr("data-name");t.hasClass("isActive")?t.closest(".filter__checkbox-wrap").find("#"+e).prop("checked",!1):t.closest(".filter__checkbox-wrap").find("#"+e).prop("checked",!0)}),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");if(function(t){"use strict";var e=jQuery.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||3<e[0])throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(),function(o){"use strict";var l=function(t,e){this.$element=o(t),this.options=o.extend({},l.DEFAULTS,e),this.$trigger=o('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};function a(t){var e,i=t.attr("data-target")||(e=t.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"");return o(i)}function r(s){return this.each(function(){var t=o(this),e=t.data("bs.collapse"),i=o.extend({},l.DEFAULTS,t.data(),"object"==typeof s&&s);!e&&i.toggle&&/show|hide/.test(s)&&(i.toggle=!1),e||t.data("bs.collapse",e=new l(this,i)),"string"==typeof s&&e[s]()})}l.VERSION="3.3.7",l.TRANSITION_DURATION=350,l.DEFAULTS={toggle:!0},l.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},l.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var t,e=this.$parent&&this.$parent.children(".collapse__tab").children(".in, .collapsing");if(!(e&&e.length&&(t=e.data("bs.collapse"))&&t.transitioning)){var i=o.Event("show.bs.collapse");if(this.$element.trigger(i),!i.isDefaultPrevented()){e&&e.length&&(r.call(e,"hide"),t||e.data("bs.collapse",null));var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!o.support.transition)return a.call(this);var n=o.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",o.proxy(a,this)).emulateTransitionEnd(l.TRANSITION_DURATION)[s](this.$element[0][n])}}}},l.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var t=o.Event("hide.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var e=this.dimension();this.$element[e](this.$element[e]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!o.support.transition)return i.call(this);this.$element[e](0).one("bsTransitionEnd",o.proxy(i,this)).emulateTransitionEnd(l.TRANSITION_DURATION)}}},l.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},l.prototype.getParent=function(){return o(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(o.proxy(function(t,e){var i=o(e);this.addAriaAndCollapsedClass(a(i),i)},this)).end()},l.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var t=o.fn.collapse;o.fn.collapse=r,o.fn.collapse.Constructor=l,o.fn.collapse.noConflict=function(){return o.fn.collapse=t,this},o(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var e=o(this);e.attr("data-target")||t.preventDefault();var i=a(e),s=i.data("bs.collapse")?"toggle":e.data();r.call(i,s)})}(jQuery),$(".js-hide-filter").on("click",function(t){t.preventDefault();var e=$(this);$(".filter__input-group--add").hasClass("js-isVisible")?($(".filter__input-group--add").removeClass("js-isVisible"),e.removeClass("iSopened")):($(".filter__input-group--add").addClass("js-isVisible"),e.addClass("iSopened"))}),$("#counter").length){var e=0;$(window).scroll(function(){var t=$("#counter").offset().top-window.innerHeight;0==e&&$(window).scrollTop()>t&&($(".counter-value").each(function(){var t=$(this),e=t.attr("data-count");$({countNum:t.text()}).animate({countNum:e},{duration:2e3,easing:"swing",step:function(){t.text(Math.floor(this.countNum))},complete:function(){t.text(this.countNum),$(".statistics__card-text").addClass("isAnimated"),$(".history__card-text").addClass("isAnimated")}})}),e=1)})}if($(".js-header-menu").on("click",function(){$(".header__side").addClass("isOpened")}),$(".header__side").on("click",function(t){$(t.target).closest(".side__wrapper").length||$(".header__side").removeClass("isOpened")}),$(".js-select-btn").on("click",function(){var t=$(this),e=t.closest(".filter__input-block").find(".js-select-block");e.hasClass("isOpen")?(t.addClass("isClosed"),t.removeClass("isOpen"),e.removeClass("isOpen")):($(".js-select-block").removeClass("isOpen"),$(".js-select-btn").removeClass("isOpen"),t.addClass("isOpen"),e.addClass("isOpen"));var i=t.closest(".filter__input-block");i.find(".filter__empty").length||i.find(".js-filter-hidden").prop("required")&&(i.find(".js-filter-hidden").val()?(i.find(".filter__empty").remove(),t.removeClass("filter__danger")):(i.find(".filter__input-wrap").append("<span class='filter__empty'>Поле обязательно для заполнения</span>"),t.addClass("filter__danger")))}),$(".js-select-item").on("click",function(){var t=$(this);t.addClass("js-selected");var e=t.text(),i=t.attr("data-group");$('.js-select-btn[data-group="'+i+'"]').text(e),t.closest(".filter__input-block").find(".js-select-label").addClass("floated"),$(".js-select-btn.isOpen").addClass("isClosed"),$(".js-select-block.isOpen").removeClass("isOpen"),$(".js-select-btn.isOpen").removeClass("isOpen"),$('.js-filter-hidden[data-group="'+i+'"]').val(e);var s=t.closest(".filter__input-block");if(s.find(".js-filter-hidden").prop("required")){s.find(".js-filter-hidden").val()?(s.find(".filter__empty").remove(),$('.js-select-btn[data-group="'+i+'"]').removeClass("filter__danger")):(s.find(".filter__input-wrap").append("<span class='filter__empty'>Поле обязательно для заполнения</span>"),$('.js-select-btn[data-group="'+i+'"]').addClass("filter__danger"))}}),$(".js-select-btn.isOpen")&&$(document).on("click",function(t){if(!$(t.target).closest(".js-select-block.isOpen").length&&!$(t.target).closest(".js-select-btn.isOpen").length){$(".js-select-btn.isOpen").addClass("isClosed"),$(".js-select-block.isOpen").removeClass("isOpen"),$(".js-select-btn.isOpen").removeClass("isOpen");var e=$(".js-select-btn.isClosed").closest(".filter__input-block");e.find(".filter__empty").length||e.find(".js-filter-hidden").prop("required")&&(e.find(".js-filter-hidden").val()?(e.find(".filter__empty").remove(),$(".js-select-btn.isClosed").removeClass("filter__danger")):(e.find(".filter__input-wrap").append("<span class='filter__empty'>Поле обязательно для заполнения</span>"),$(".js-select-btn.isClosed").addClass("filter__danger")))}}),$(".filter__input").on("focus",function(){$(this).closest(".filter__input-wrap").find(".filter__floating-label").addClass("floated")}),$(".filter__input").on("blur",function(){var t,e,i=$(this),s=i.closest(".filter__input-wrap"),a=s.find(".filter__input");if(i.val()){var n=a.attr("name");if("name"===n)if(-1<a.val().indexOf(" "))s.addClass("validated"),a.hasClass("filter__danger")&&(a.removeClass("filter__danger"),s.find(".filter__empty").remove());else{s.removeClass("validated"),s.find(".filter__empty").remove();o="<span class='filter__empty'>Поле должно содержать Имя и Фамилию через пробел</span>";a.addClass("filter__danger"),s.append(o)}else if("email"===n)if(e=a.val(),/^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/.test(e))s.addClass("validated"),a.hasClass("filter__danger")&&(a.removeClass("filter__danger"),s.find(".filter__empty").remove());else{s.removeClass("validated"),s.find(".filter__empty").remove();o="<span class='filter__empty'>Email должен содержать латинские буквы, символы @ и .</span>";a.addClass("filter__danger"),s.append(o)}else if("tel"===n)if(t=a.val(),/^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{10,14}$/.test(t))s.addClass("validated"),a.hasClass("filter__danger")&&(a.removeClass("filter__danger"),s.find(".filter__empty").remove());else{s.removeClass("validated"),s.find(".filter__empty").remove();o="<span class='filter__empty'>Номер телефона должен содержать от 10 до 14 цифр</span>";a.addClass("filter__danger"),s.append(o)}else a.removeClass("filter__danger"),s.find(".filter__empty").remove()}else{var o="<span class='filter__empty'>Поле обязательно для заполнения</span>";s.removeClass("validated"),s.find(".filter__floating-label").removeClass("floated"),i.prop("required")&&(a.hasClass("filter__danger")||(a.addClass("filter__danger"),s.append(o)))}}),$(".item__img").click(function(){var t=$(this).attr("src");console.log(t),$(".image__container").css("background-image","url("+t+")")}),null!==document.getElementById("map")){function t(){var e=new ymaps.Map("map",{center:[55.76,37.64],zoom:10,controls:[]}),i=ymaps.templateLayoutFactory.createClass("<div class='map__zoom-block u-jc-sbu-fd-col'><div id='zoom-in' class='map__zoom u-jc-ce u-ai-ce'><svg class='svg' width='12px' height='12px' viewBox='0 0 12 12' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><g id='Group' ><rect id='Rectangle-3' x='0' y='5' width='12' height='2'></rect><rect id='Rectangle-3' transform='translate(6.000000, 6.000000) rotate(90.000000) translate(-6.000000, -6.000000) ' x='0' y='5' width='12' height='2'></rect></g></svg></div><br><div id='zoom-out' class='map__zoom map__zoom--minus u-jc-ce u-ai-ce'><svg class='svg' width='8px' height='2px' viewBox='0 0 8 2' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><rect id='map__minus' width='8' height='2'></rect></svg></div>",{build:function(){i.superclass.build.call(this),this.zoomInCallback=ymaps.util.bind(this.zoomIn,this),this.zoomOutCallback=ymaps.util.bind(this.zoomOut,this),$("#zoom-in").bind("click",this.zoomInCallback),$("#zoom-out").bind("click",this.zoomOutCallback)},clear:function(){$("#zoom-in").unbind("click",this.zoomInCallback),$("#zoom-out").unbind("click",this.zoomOutCallback),i.superclass.clear.call(this)},zoomIn:function(){var t=this.getData().control.getMap();t.setZoom(t.getZoom()+1,{checkZoomRange:!0})},zoomOut:function(){var t=this.getData().control.getMap();t.setZoom(t.getZoom()-1,{checkZoomRange:!0})}});function s(t){return{type:"FeatureCollection",features:t.map(function(t,e){return{id:e,type:"Feature",geometry:{type:"Point",coordinates:[t.lat,t.long]},properties:{iconCaption:t.serialNumber}}})}}function t(){return fetch("../js/test.json").then(function(t){return t.json()}).then(function(t){return s(t)})}$(window).on("resize",function(){var t=document.getElementById("map").offsetHeight/2-50;e.controls.remove("zoomControl"),e.controls.add("zoomControl",{layout:i,position:{left:"30px",top:t}})}).resize();var a=new ymaps.ObjectManager({clusterize:!0,gridSize:64,clusterIconLayout:"default#pieChart",clusterDisableClickZoom:!1});t().then(function(t){a.add(t)}),a.objects.options.set({iconLayout:"default#image",iconImageHref:"images/map__baloon.png",iconImageSize:[57,51],iconImageOffset:[-37,-50]}),e.geoObjects.add(a)}ymaps.ready(t)}else if(null!==document.getElementById("item-map")){ymaps.ready(t);var s=$("#item-map").attr("data-lng"),a=$("#item-map").attr("data-lat");function t(){var e=new ymaps.Map("item-map",{center:[s,a],zoom:13,controls:[]}),t=new ymaps.Placemark([s,a],{},{iconLayout:"default#image",iconImageHref:"images/map__baloon.png",iconImageSize:[57,51],iconImageOffset:[-37,-50]}),i=ymaps.templateLayoutFactory.createClass("<div class='map__zoom-block u-jc-sbu-fd-col'><div id='zoom-in' class='map__zoom u-jc-ce u-ai-ce'><svg class='svg' width='12px' height='12px' viewBox='0 0 12 12' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><g id='Group' ><rect id='Rectangle-3' x='0' y='5' width='12' height='2'></rect><rect id='Rectangle-3' transform='translate(6.000000, 6.000000) rotate(90.000000) translate(-6.000000, -6.000000) ' x='0' y='5' width='12' height='2'></rect></g></svg></div><br><div id='zoom-out' class='map__zoom map__zoom--minus u-jc-ce u-ai-ce'><svg class='svg' width='8px' height='2px' viewBox='0 0 8 2' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><rect id='map__minus' width='8' height='2'></rect></svg></div>",{build:function(){i.superclass.build.call(this),this.zoomInCallback=ymaps.util.bind(this.zoomIn,this),this.zoomOutCallback=ymaps.util.bind(this.zoomOut,this),$("#zoom-in").bind("click",this.zoomInCallback),$("#zoom-out").bind("click",this.zoomOutCallback)},clear:function(){$("#zoom-in").unbind("click",this.zoomInCallback),$("#zoom-out").unbind("click",this.zoomOutCallback),i.superclass.clear.call(this)},zoomIn:function(){var t=this.getData().control.getMap();t.setZoom(t.getZoom()+1,{checkZoomRange:!0})},zoomOut:function(){var t=this.getData().control.getMap();t.setZoom(t.getZoom()-1,{checkZoomRange:!0})}});$(window).on("resize",function(){var t=document.getElementById("item-map").offsetHeight/2-50;e.controls.remove("zoomControl"),e.controls.add("zoomControl",{layout:i,position:{left:"30px",top:t}})}).resize(),e.geoObjects.add(t)}}$("#modal-close").on("click",function(t){$(this).closest(".js-modal").removeClass("isOpened")}),$(".js-modal__btn").on("click",function(t){var e=$(this).attr("data-modal");$("#"+e).addClass("isOpened")}),$(window).on("resize",function(){if(null!==$(".scrollable-inner"))for(var t=0;t<$(".scrollable-inner").length;t++){var e=$(".scrollable-inner")[t],i=$(e).attr("data-iscroll"),s=$('.scrollable-parent[data-pscroll="'+i+'"]'),a=e.clientHeight;s.height(a)}}).resize(),$(window).on("scroll load",function(){var t=$(".js-header");60<=$(window).scrollTop()?t.addClass("sticked"):t.removeClass("sticked")}),$(".js-tab__item").on("click",function(t){var e=$(this);e.closest(".tab").find(".js-tab__item").removeClass("js-active"),e.addClass("js-active");var i=e.attr("data-tab");e.closest(".tab").find(".tab__block").removeClass("js-active"),$('[data-content="'+i+'"]').addClass("js-active")}),$(".js-toggle-item").click(function(){$(this).toggleClass("isActive")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
